openapi: 3.1.0
info:
  title: HumanLayer Daemon API
  description: API for managing Claude Code sessions and approvals
  version: 1.0.0
  license:
    name: MIT
servers:
  - url: http://localhost:7777/api/v1
    description: Local daemon
  - url: http://{host}:7777/api/v1
    description: Self-hosted daemon
    variables:
      host:
        default: 192.168.1.100
        description: IP address of the daemon host

paths:
  /sessions:
    get:
      operationId: listSessions
      summary: List all sessions
      tags: [Sessions]
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionInfo'
    
    post:
      operationId: createSession
      summary: Create a new Claude Code session
      tags: [Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'

  /sessions/{sessionId}:
    get:
      operationId: getSession
      summary: Get session details
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        '404':
          $ref: '#/components/responses/NotFound'

  /sessions/{sessionId}/conversation:
    get:
      operationId: getConversation
      summary: Get session conversation history
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Conversation events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationEvent'
        '404':
          $ref: '#/components/responses/NotFound'

  /sessions/{sessionId}/continue:
    post:
      operationId: continueSession
      summary: Continue a completed session with a new query
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContinueSessionRequest'
      responses:
        '201':
          description: Continued session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /sessions/{sessionId}/settings:
    get:
      operationId: getSessionSettings
      summary: Get session-specific settings and overrides
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Session settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionSettings'
        '404':
          $ref: '#/components/responses/NotFound'
    
    post:
      operationId: updateSessionSettings
      summary: Update session-specific settings
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionSettings'
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionSettings'
        '404':
          $ref: '#/components/responses/NotFound'

  /sessions/{sessionId}/interrupt:
    post:
      operationId: interruptSession
      summary: Interrupt a running session (SIGINT)
      tags: [Sessions]
      description: Sends SIGINT to the Claude Code process, making it save state and exit gracefully. The session can be resumed later.
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        '200':
          description: Session interrupted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  session_id:
                    type: string
                  status:
                    type: string
                    enum: [interrupting, completed]
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Session not in a state that can be interrupted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /approvals:
    get:
      operationId: listApprovals
      summary: List pending approvals
      tags: [Approvals]
      parameters:
        - name: session_id
          in: query
          schema:
            type: string
          description: Filter by session ID
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, denied]
          description: Filter by status
      responses:
        '200':
          description: List of approvals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApprovalRequest'
    
    post:
      operationId: createApproval
      summary: Create a new approval request (for MCP server)
      tags: [Approvals]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApprovalRequest'
      responses:
        '201':
          description: Approval created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '400':
          $ref: '#/components/responses/BadRequest'

  /approvals/{approvalId}:
    get:
      operationId: getApproval
      summary: Get approval details with enriched context
      tags: [Approvals]
      parameters:
        - $ref: '#/components/parameters/approvalId'
      responses:
        '200':
          description: Approval details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /approvals/{approvalId}/decide:
    put:
      operationId: decideApproval
      summary: Approve or deny an approval request
      tags: [Approvals]
      parameters:
        - $ref: '#/components/parameters/approvalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalDecision'
      responses:
        '200':
          description: Decision recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Approval already decided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /approvals/{approvalId}/context/stream:
    get:
      operationId: streamApprovalContext
      summary: Stream large approval context
      tags: [Approvals]
      parameters:
        - $ref: '#/components/parameters/approvalId'
      responses:
        '200':
          description: Context stream
          content:
            text/event-stream:
              schema:
                oneOf:
                  - type: object
                    properties:
                      event:
                        type: string
                        const: context_chunk
                      data:
                        type: object
                        properties:
                          chunk:
                            type: string
                          index:
                            type: integer
                          total:
                            type: integer
                  - type: object
                    properties:
                      event:
                        type: string
                        const: context_complete
                      data:
                        type: object
                        properties:
                          total_chunks:
                            type: integer
                          total_size:
                            type: integer
                          checksum:
                            type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /events:
    get:
      operationId: subscribeEvents
      summary: Subscribe to server-sent events
      tags: [Events]
      parameters:
        - name: session_id
          in: query
          schema:
            type: string
          description: Filter events by session
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [session_status_changed, new_approval, approval_resolved, conversation_updated]
          style: form
          explode: false
          description: Event types to subscribe to
      responses:
        '200':
          description: Event stream
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event'

components:
  parameters:
    sessionId:
      name: sessionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    
    approvalId:
      name: approvalId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    CreateSessionRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          description: The prompt or task for Claude
        model:
          type: string
          enum: [opus-3, sonnet-3.5, haiku-3.5]
          default: sonnet-3.5
        working_dir:
          type: string
          description: Working directory for the session
        system_prompt:
          type: string
          description: Custom system prompt
        append_system_prompt:
          type: string
          description: Text to append to default system prompt
        custom_instructions:
          type: string
          description: Additional instructions for Claude
        max_turns:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        mcp_config:
          $ref: '#/components/schemas/MCPConfig'
        permission_prompt_tool:
          type: string
          description: MCP tool for handling permissions
        allowed_tools:
          type: array
          items:
            type: string
          description: List of allowed tools
        disallowed_tools:
          type: array
          items:
            type: string
          description: List of disallowed tools

    ContinueSessionRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          description: New prompt to continue with
        system_prompt:
          type: string
        append_system_prompt:
          type: string
        custom_instructions:
          type: string
        max_turns:
          type: integer
        mcp_config:
          $ref: '#/components/schemas/MCPConfig'
        permission_prompt_tool:
          type: string
        allowed_tools:
          type: array
          items:
            type: string
        disallowed_tools:
          type: array
          items:
            type: string

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/SessionStatus'
        start_time:
          type: string
          format: date-time

    SessionInfo:
      allOf:
        - $ref: '#/components/schemas/Session'
        - type: object
          properties:
            claude_session_id:
              type: string
            parent_session_id:
              type: string
              format: uuid
            query:
              type: string
            model:
              type: string
            working_dir:
              type: string
            last_activity_at:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            cost_usd:
              type: number
            duration_ms:
              type: integer
            num_turns:
              type: integer
            error:
              type: string

    SessionStatus:
      type: string
      enum: [starting, running, waiting_input, completed, failed]

    SessionSettings:
      type: object
      properties:
        auto_accept_edits:
          type: boolean
          description: Automatically accept Edit and Write tool calls
        auto_accept_patterns:
          type: array
          items:
            type: string
          description: Patterns of tools to auto-accept (e.g., "Write", "Bash(npm test:*)")
        temporary_allowed_tools:
          type: array
          items:
            type: string
          description: Additional allowed tools for this session only

    MCPConfig:
      type: object
      properties:
        mcpServers:
          type: object
          additionalProperties:
            type: object
            required: [command, args]
            properties:
              command:
                type: string
              args:
                type: array
                items:
                  type: string
              env:
                type: object
                additionalProperties:
                  type: string

    ConversationEvent:
      type: object
      properties:
        id:
          type: integer
        session_id:
          type: string
          format: uuid
        event_type:
          type: string
          enum: [message, tool_call, tool_result, system]
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
        tool_name:
          type: string
        tool_id:
          type: string
        tool_input_json:
          type: string
        tool_result_content:
          type: string
        approval_status:
          type: string
          enum: [pending, approved, denied]
        created_at:
          type: string
          format: date-time
        is_completed:
          type: boolean

    CreateApprovalRequest:
      type: object
      required: [session_id, tool_name, tool_input]
      properties:
        session_id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        tool_name:
          type: string
        tool_id:
          type: string
        tool_input:
          type: object
          description: Tool parameters
        context:
          oneOf:
            - type: string
              description: Simple string context (e.g., file contents)
            - type: object
              description: Structured context data
        context_type:
          type: string
          enum: [string, object]
          description: Type of context data (required if context is provided)
        context_schema:
          type: object
          description: JSON Schema for structured context (required when context_type is 'object')

    ApprovalRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        tool_name:
          type: string
        tool_id:
          type: string
        tool_input:
          type: object
        context:
          oneOf:
            - type: string
              description: Simple string context (e.g., file contents)
            - type: object
              description: Structured context data
        context_type:
          type: string
          enum: [string, object]
          description: Type of context data
        context_schema:
          type: object
          description: JSON Schema for structured context (only present when context_type is 'object')
        status:
          type: string
          enum: [pending, approved, denied]
        decision_comment:
          type: string
        created_at:
          type: string
          format: date-time
        decided_at:
          type: string
          format: date-time

    ApprovalDecision:
      type: object
      required: [decision]
      properties:
        decision:
          type: string
          enum: [approve, deny]
        comment:
          type: string
          description: Optional comment or reason (for simple responses)
        response_data:
          oneOf:
            - type: string
              description: Simple response data
            - type: object
              description: Structured response data (e.g., updatedInput, save_rule)
        response_type:
          type: string
          enum: [string, object]
          description: Type of response data (required if response_data is provided)
        response_schema:
          type: object
          description: JSON Schema for structured response (required when response_type is 'object')

    Event:
      type: object
      properties:
        type:
          type: string
          enum: [session_status_changed, new_approval, approval_resolved, conversation_updated]
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          description: Event-specific data

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Sessions
    description: Claude Code session management
  - name: Approvals
    description: Approval request management
  - name: Context
    description: Context enrichment operations
  - name: Events
    description: Real-time event streaming