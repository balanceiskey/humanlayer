---
component: Config
version: "1.0.0"
category: Core Data Model
description: Configuration management and schema validation
---

# Configuration Data Model

## Overview
The Configuration system manages application settings, provider configurations, and user preferences through a hierarchical configuration loading system with JSON schema validation.

## Entity: Config.Info

### Purpose
- Centralize application configuration
- Support hierarchical configuration loading
- Validate configuration schemas
- Enable project-specific and global settings

### Schema Definition
```typescript
interface ConfigInfo {
  $schema?: string;                    // JSON schema reference
  theme?: string;                      // UI theme name
  keybinds?: KeybindsConfig;          // Custom keybind configurations
  autoshare?: boolean;                 // Auto-share new sessions
  autoupdate?: boolean;                // Auto-update application
  disabled_providers?: string[];       // Disabled provider list
  model?: string;                      // Default model (provider/model)
  provider?: Record<string, ProviderConfig>; // Provider configurations
  mcp?: Record<string, McpConfig>;     // MCP server configurations
}
```

### Keybinds Configuration

#### Schema Definition
```typescript
interface KeybindsConfig {
  leader?: string;                     // Leader key for combinations
  help?: string;                       // Show help dialog
  editor_open?: string;                // Open external editor
  session_new?: string;                // Create new session
  session_list?: string;               // List all sessions
  session_share?: string;              // Share current session
  session_interrupt?: string;          // Interrupt current session
  session_compact?: string;            // Toggle compact mode
  tool_details?: string;               // Show tool details
  model_list?: string;                 // List available models
  theme_list?: string;                 // List available themes
  project_init?: string;               // Initialize project config
  input_clear?: string;                // Clear input field
  input_paste?: string;                // Paste from clipboard
  input_submit?: string;               // Submit input
  input_newline?: string;              // Insert newline
  history_previous?: string;           // Previous history item
  history_next?: string;               // Next history item
  messages_page_up?: string;           // Scroll messages up
  messages_page_down?: string;         // Scroll messages down
  messages_half_page_up?: string;      // Scroll half page up
  messages_half_page_down?: string;    // Scroll half page down
  messages_previous?: string;          // Previous message
  messages_next?: string;              // Next message
  messages_first?: string;             // First message
  messages_last?: string;              // Last message
  app_exit?: string;                   // Exit application
}
```

#### Default Keybinds
Configuration includes comprehensive keybind mappings for terminal UI interaction with vim-style navigation support.

### Provider Configuration

#### Schema Definition
```typescript
interface ProviderConfig {
  api?: string;                        // Provider API endpoint
  name?: string;                       // Provider display name
  env?: string[];                      // Environment variables
  id?: string;                         // Provider identifier
  npm?: string;                        // NPM package name
  models: Record<string, ModelConfig>; // Model configurations
  options?: Record<string, any>;       // Provider-specific options
}
```

#### Model Configuration
```typescript
interface ModelConfig {
  name?: string;                       // Model display name
  attachment?: boolean;                // File attachment support
  reasoning?: boolean;                 // Reasoning capability
  temperature?: boolean;               // Temperature control
  cost?: CostConfig;                   // Cost configuration
  limit?: LimitConfig;                 // Model limits
  id?: string;                         // Model identifier
}
```

#### Cost Configuration
```typescript
interface CostConfig {
  input: number;                       // Input token cost per million
  output: number;                      // Output token cost per million
  cache_read?: number;                 // Cache read cost per million
  cache_write?: number;                // Cache write cost per million
}
```

#### Limit Configuration
```typescript
interface LimitConfig {
  context: number;                     // Context window size
  output: number;                      // Max output tokens
}
```

### MCP Configuration

#### MCP Local Server
```typescript
interface McpLocal {
  type: "local";                       // Connection type
  command: string[];                   // Command and arguments
  environment?: Record<string, string>; // Environment variables
}
```

#### MCP Remote Server
```typescript
interface McpRemote {
  type: "remote";                      // Connection type
  url: string;                         // Server URL
}
```

#### Discriminated Union
```typescript
type McpConfig = McpLocal | McpRemote;
```

### Configuration Loading Strategy

#### Hierarchical Loading
1. **Global Configuration**: `~/.config/opencode/config.json`
2. **Project Configuration**: `opencode.json` or `opencode.jsonc` files
3. **Directory Traversal**: Search up from current working directory
4. **Merge Strategy**: Deep merge with project configs overriding global

#### File Discovery Process
```typescript
async function loadConfig(cwd: string, root: string): Promise<ConfigInfo> {
  let result = await loadGlobal();
  
  // Search for project configs
  for (const file of ["opencode.jsonc", "opencode.json"]) {
    const found = await findUp(file, cwd, root);
    for (const resolved of found.reverse()) {
      result = mergeDeep(result, await loadFile(resolved));
    }
  }
  
  return result;
}
```

### Storage Strategy

#### Global Configuration
- **Location**: `~/.config/opencode/config.json`
- **Format**: JSON with optional `$schema` reference
- **Schema URL**: `https://opencode.ai/config.json`

#### Project Configuration
- **Filenames**: `opencode.json`, `opencode.jsonc`
- **Location**: Project root or ancestor directories
- **Format**: JSON or JSON with comments (JSONC)

#### Legacy TOML Support
- **Migration**: Automatic conversion from `config` TOML file
- **Cleanup**: Remove TOML file after successful migration
- **Format**: Provider/model format converted to new structure

### Validation System

#### JSON Schema Generation
```typescript
const ConfigSchema = z.object({
  $schema: z.string().optional(),
  theme: z.string().optional(),
  keybinds: KeybindsSchema.optional(),
  autoshare: z.boolean().optional(),
  autoupdate: z.boolean().optional(),
  disabled_providers: z.array(z.string()).optional(),
  model: z.string().optional(),
  provider: z.record(ProviderSchema).optional(),
  mcp: z.record(McpSchema).optional()
}).strict();
```

#### Runtime Validation
- **Zod Schema**: Comprehensive schema validation
- **Strict Mode**: No additional properties allowed
- **Error Handling**: Detailed validation error reporting

#### Schema Evolution
- **Backward Compatibility**: Support for older configuration formats
- **Migration**: Automatic migration of deprecated fields
- **Validation**: Schema version tracking for breaking changes

### Error Handling

#### Known Error Types
```typescript
export const JsonError = NamedError.create(
  "ConfigJsonError",
  z.object({
    path: z.string()
  })
);

export const InvalidError = NamedError.create(
  "ConfigInvalidError", 
  z.object({
    path: z.string(),
    issues: z.custom<z.ZodIssue[]>().optional()
  })
);
```

#### Error Recovery
- **Partial Loading**: Continue with partial configuration on errors
- **Default Values**: Fallback to sensible defaults
- **Error Reporting**: Clear error messages with file path context

### Data Flow

#### Configuration Loading
1. Initialize with empty configuration
2. Load global configuration from user directory
3. Discover project configuration files
4. Traverse directory hierarchy upward
5. Merge configurations with project precedence
6. Validate final configuration schema
7. Cache configuration in application state

#### Configuration Updates
1. Validate new configuration against schema
2. Write to appropriate configuration file
3. Trigger configuration reload
4. Update application state
5. Notify components of configuration changes

### State Management

#### Application State
```typescript
const configState = App.state("config", async (app) => {
  let result = await loadGlobal();
  
  // Load project-specific configs
  for (const file of ["opencode.jsonc", "opencode.json"]) {
    const found = await Filesystem.findUp(file, app.path.cwd, app.path.root);
    for (const resolved of found.reverse()) {
      result = mergeDeep(result, await loadFile(resolved));
    }
  }
  
  return result;
});
```

#### Lazy Loading
- **Global Config**: Lazy-loaded singleton pattern
- **Project Config**: Loaded per application context
- **Caching**: Configuration cached for application lifetime

### JSON Schema Reference

#### Schema URL
- **Production**: `https://opencode.ai/config.json`
- **Schema Content**: Generated from Zod schema definitions
- **IDE Support**: Enable autocomplete and validation in editors

#### Schema Generation
```typescript
export function generateSchema(): object {
  return {
    "type": "object",
    "properties": {
      "$schema": {
        "type": "string",
        "description": "JSON schema reference for configuration validation"
      },
      // ... other property definitions
    },
    "additionalProperties": false,
    "$schema": "http://json-schema.org/draft-07/schema#"
  };
}
```

### Configuration Examples

#### Minimal Configuration
```json
{
  "$schema": "https://opencode.ai/config.json",
  "model": "anthropic/claude-3-5-sonnet-20241022"
}
```

#### Complete Configuration
```json
{
  "$schema": "https://opencode.ai/config.json",
  "theme": "opencode",
  "autoshare": true,
  "autoupdate": false,
  "model": "anthropic/claude-3-5-sonnet-20241022",
  "disabled_providers": ["experimental-provider"],
  "keybinds": {
    "leader": "Space",
    "session_new": "c",
    "session_list": "l"
  },
  "provider": {
    "anthropic": {
      "models": {
        "claude-3-5-sonnet-20241022": {
          "cost": {
            "input": 3.0,
            "output": 15.0,
            "cache_read": 0.3,
            "cache_write": 3.75
          }
        }
      }
    }
  },
  "mcp": {
    "filesystem": {
      "type": "local",
      "command": ["npx", "mcp-filesystem"],
      "environment": {
        "MCP_ROOT": "/project"
      }
    },
    "web-search": {
      "type": "remote",
      "url": "https://api.example.com/mcp"
    }
  }
}
```

### Migration Strategy

#### TOML to JSON Migration
```typescript
async function migrateLegacyConfig(): Promise<void> {
  const tomlPath = path.join(Global.Path.config, "config");
  const jsonPath = path.join(Global.Path.config, "config.json");
  
  try {
    const tomlData = await import(tomlPath, { with: { type: "toml" } });
    const { provider, model, ...rest } = tomlData.default;
    
    const jsonData = {
      $schema: "https://opencode.ai/config.json",
      model: provider && model ? `${provider}/${model}` : undefined,
      ...rest
    };
    
    await Bun.write(jsonPath, JSON.stringify(jsonData, null, 2));
    await fs.unlink(tomlPath);
  } catch (error) {
    // Migration not needed or failed
  }
}
```

### Security Considerations

#### Environment Variables
- **Secret Storage**: Sensitive data in environment variables
- **Configuration**: Non-sensitive settings in configuration files
- **Separation**: Clear separation between secrets and configuration

#### File Permissions
- **Global Config**: Standard user file permissions
- **Project Config**: Version control friendly permissions
- **Secret Files**: Restricted permissions for auth data

### Performance Considerations

#### Loading Optimization
- **Async Loading**: Non-blocking configuration loading
- **Caching**: Configuration cached after initial load
- **Lazy Evaluation**: Configuration loaded only when needed

#### Memory Management
- **Singleton Pattern**: Single configuration instance per application
- **Deep Merge**: Efficient deep merging of configuration objects
- **Garbage Collection**: Automatic cleanup of temporary configuration data

### Extensibility

#### Schema Extension
- **Provider Schemas**: Dynamic schema generation for new providers
- **Plugin Configuration**: Support for plugin-specific configuration
- **Custom Validation**: Extensible validation rules

#### Configuration Sources
- **Environment Variables**: Override configuration with environment
- **Command Line**: Runtime configuration overrides
- **API Configuration**: Remote configuration management (future)
