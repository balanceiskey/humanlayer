---
component: Data Models Index
version: "1.0.0"
category: Documentation
description: Complete index of OpenCode data models and schemas
---

# OpenCode Data Models Index

## Overview
This document provides a comprehensive index of all data models, schemas, and data structures within the OpenCode system, organized by category and purpose.

## Core Data Models

### Session Management
- **[Session](./session.yaml)** - Conversation threads and session lifecycle
  - Session.Info - Session metadata and state
  - Session.ShareInfo - Sharing credentials and URLs
  - Hierarchical session relationships (parent-child)
  - Auto-summarization and context management

### Message System
- **[Message](./message.yaml)** - Conversation messages and content
  - Message.Info - Message structure and metadata
  - Message parts (text, reasoning, tool invocations, files)
  - Tool execution states and results
  - Streaming message updates

### Tool Framework
- **[Tool](./tool.yaml)** - Tool definitions and execution
  - Tool.Info - Tool interface and parameters
  - Built-in tools (bash, read, write, edit, grep, etc.)
  - Tool execution context and metadata
  - MCP (Model Context Protocol) integration

### Configuration Management
- **[Config](./config.yaml)** - Application and project configuration
  - Config.Info - Configuration schema
  - Hierarchical configuration loading
  - Provider and model configurations
  - Keybind and UI customizations

### Authentication System
- **[Auth](./auth.yaml)** - Credential and authentication management
  - Auth.Info - OAuth and API key storage
  - Provider-specific authentication flows
  - Token refresh and expiration handling
  - Secure credential storage

### Provider Management
- **[Provider](./provider.yaml)** - AI provider and model management
  - Provider.Info - Provider configurations
  - Model.Info - Model capabilities and costs
  - Dynamic provider loading
  - Cost tracking and optimization

### Data Persistence
- **[Storage](./storage.yaml)** - File-based data storage
  - JSON serialization and atomic operations
  - Project-based storage isolation
  - Hierarchical key organization
  - Event-driven synchronization

### Event System
- **[Event Bus](./event_bus.yaml)** - Event-driven communication
  - Type-safe event definitions
  - Reactive state synchronization
  - Component decoupling
  - Real-time UI updates

## Data Model Relationships

### Entity Relationship Diagram
```mermaid
erDiagram
    Session ||--o{ Message : contains
    Session ||--o| Share : "can have"
    Session ||--o{ Session : "parent-child"
    Message ||--o{ ToolInvocation : executes
    Message }o--|| Provider : "generated by"
    Config ||--o{ Provider : configures
    Auth ||--o{ Provider : authenticates
    Storage ||--|| Session : persists
    Storage ||--|| Message : persists
    EventBus ||--o{ Session : notifies
    EventBus ||--o{ Message : notifies
```

### Core Data Flow
1. **Configuration Loading** - Hierarchical config merge with validation
2. **Provider Authentication** - OAuth/API key validation and refresh
3. **Session Creation** - ID generation, storage, and sharing setup
4. **Message Exchange** - Streaming content with tool execution
5. **Data Persistence** - Atomic storage with event notifications
6. **State Synchronization** - Event-driven updates across components

## Storage Organization

### File System Layout
```
~/.local/share/opencode/
├── project/
│   ├── global/                      # Non-git projects
│   │   └── storage/
│   │       ├── session/
│   │       │   ├── info/           # Session metadata
│   │       │   ├── message/        # Message content
│   │       │   └── share/          # Share credentials
│   │       └── app.json            # Application state
│   └── <git-hash>/                  # Git-based projects
│       └── storage/ ...
├── auth.json                        # Authentication data
└── cache/
    └── models.json                  # Cached provider data
```

### Key Naming Conventions
- **Prefixed IDs**: `ses_`, `msg_`, `usr_` for entity identification
- **Hierarchical Keys**: Forward slash separation for namespaces
- **Atomic Extensions**: `.json` for data files, `.tmp` for temporary files

## Data Validation

### Schema Validation Framework
All data models use Zod schemas for:
- **Runtime Validation** - Type checking at data boundaries
- **OpenAPI Generation** - API documentation and tooling
- **TypeScript Integration** - Compile-time type safety
- **Error Handling** - Structured validation errors

### Validation Patterns
```typescript
// Entity schema definition
export const Info = z.object({
  id: Identifier.schema("session"),
  title: z.string(),
  time: z.object({
    created: z.number(),
    updated: z.number()
  })
}).openapi({ ref: "Session.Info" });

// Type inference
export type Info = z.infer<typeof Info>;

// Validation usage
const session = Info.parse(data);
```

## Event-Driven Architecture

### Event Categories
- **Lifecycle Events** - Entity creation, updates, deletion
- **State Changes** - Configuration updates, authentication changes
- **User Actions** - Tool executions, session interactions
- **System Events** - Storage operations, error conditions

### Event Flow Patterns
1. **Command → Event → State** - User actions trigger events that update state
2. **State → Event → UI** - State changes emit events that update UI
3. **Storage → Event → Sync** - Storage writes trigger synchronization
4. **Error → Event → Recovery** - Errors emit events for recovery handling

## Security Model

### Data Protection
- **File Permissions** - Restricted access to sensitive data
- **Credential Isolation** - Separate storage for authentication data
- **Project Isolation** - Complete data separation between projects
- **Memory Protection** - Secure handling of sensitive data in memory

### Authentication Security
- **OAuth 2.0** - Standards-based authentication with PKCE
- **Token Rotation** - Automatic refresh token handling
- **Secure Storage** - Encrypted credential storage with restricted permissions
- **Session Management** - Secure session token handling

## Performance Characteristics

### Storage Performance
- **Atomic Operations** - Crash-safe data writes
- **Lazy Loading** - On-demand data retrieval
- **Efficient Listing** - Optimized directory scanning
- **Memory Management** - Bounded memory usage

### Event Performance
- **Synchronous Publishing** - Low-latency event delivery
- **Subscription Management** - Efficient subscriber lookup
- **Memory Optimization** - Automatic subscription cleanup
- **Debouncing** - Batch related events for efficiency

## Data Migration and Versioning

### Schema Evolution
- **Backward Compatibility** - Support for older data formats
- **Migration Scripts** - Automatic data format updates
- **Version Tracking** - Schema version metadata
- **Graceful Degradation** - Fallback for unknown data formats

### Data Export/Import
- **JSON Export** - Complete data export in JSON format
- **Selective Export** - Export specific sessions or data types
- **Import Validation** - Schema validation on data import
- **Conflict Resolution** - Handle ID conflicts during import

## Development Guidelines

### Adding New Data Models
1. **Define Zod Schema** - Create typed schema with validation
2. **Document Entity** - Complete YAML specification
3. **Implement Storage** - Add storage operations
4. **Add Events** - Define relevant events
5. **Update Index** - Add to this index document

### Schema Design Principles
- **Type Safety** - Strong typing with runtime validation
- **Immutability** - Prefer immutable data structures
- **Composability** - Design for schema composition
- **Extensibility** - Support for future schema evolution

### Testing Strategy
- **Schema Validation** - Test all validation rules
- **Round-trip Testing** - Serialize/deserialize validation
- **Migration Testing** - Test data format migrations
- **Performance Testing** - Benchmark storage operations

## Future Enhancements

### Advanced Features
- **Data Compression** - Compress large data files
- **Encryption at Rest** - Optional encrypted storage
- **Distributed Storage** - Multi-node storage support
- **Real-time Sync** - Live synchronization across instances

### Query Capabilities
- **Secondary Indices** - Fast lookups by properties
- **Full-text Search** - Search across message content
- **Aggregation** - Statistical queries over data
- **Temporal Queries** - Time-based data access

### Integration Improvements
- **Database Backends** - SQLite and PostgreSQL support
- **Cloud Storage** - AWS S3, Google Cloud Storage integration
- **Event Sourcing** - Complete event-driven architecture
- **CQRS** - Command Query Responsibility Segregation

## Related Documentation

### Technical Specifications
- [API Documentation](../api/) - REST API endpoints and schemas
- [Architecture Overview](../architecture/) - System architecture and design
- [Security Model](../security/) - Security architecture and practices

### Developer Resources
- [Development Guide](../development/) - Setup and development workflow
- [Testing Guide](../testing/) - Testing strategies and practices
- [Deployment Guide](../deployment/) - Deployment and operations
